/* Generated By:JavaCC: Do not edit this line. assignment_one.java */
import java.io.*;
import java.util.*;

public class assignment_one implements assignment_oneConstants {
    public static void main(String[] args) {
        assignment_one tokeniser;

        // Initialise parser
        if(args.length == 1) {
            try {
                tokeniser = new assignment_one(new FileInputStream(args[0]));
            }
            catch(FileNotFoundException e) {
                System.err.println("File " + args[0] + " not found");
                return;
            }
        } else {
            System.out.println("assignment_one can be used by entering the following command:");
            System.out.println("     java assignment_one inputfile");
            return;
        }

        // put all tokens into map to be accessed when displaying program
        HashMap allTokens = new HashMap();
        allTokens.put(VAR, "VAR");
        allTokens.put(CONST, "CONST");
        allTokens.put(RETURN, "RETURN");
        allTokens.put(INTEGER, "INTEGER");
        allTokens.put(BOOLEAN, "BOOLEAN");
        allTokens.put(VOID, "VOID");
        allTokens.put(MAIN, "MAIN");
        allTokens.put(IF, "IF");
        allTokens.put(ELSE, "ELSE");
        allTokens.put(WHILE, "WHILE");
        allTokens.put(SK, "SK");
        allTokens.put(TRUE, "TRUE");
        allTokens.put(COMMA, "COMMA");
        allTokens.put(SEMICOLON, "SEMICOLON");
        allTokens.put(COLON, "COLON");
        allTokens.put(LEFT_BRACE, "LEFT_BRACE");
        allTokens.put(RIGHT_BRACE, "RIGHT_BRACE");
        allTokens.put(LEFT_BRACKET, "LEFT_BRACKET");
        allTokens.put(RIGHT_BRACKET, "RIGHT_BRACKET");
        allTokens.put(ASSIGNMENT, "ASSIGNMENT");
        allTokens.put(PLUS, "PLUS");
        allTokens.put(MINUS, "MINUS");
        allTokens.put(NOT, "NOT");
        allTokens.put(OR, "OR");
        allTokens.put(AND, "AND");
        allTokens.put(EQUALS, "EQUALS");
        allTokens.put(NOT_EQUALS, "NOT_EQUALS");
        allTokens.put(LESS_THAN, "LESS_THAN");
        allTokens.put(LESS_THAN_OR_EQUAL_TO, "LESS_THAN_OR_EQUAL_TO");
        allTokens.put(GREATER_THAN, "GREATER_THAN");
        allTokens.put(GREATER_THAN_OR_EQUAL_TO, "GREATER_THAN_OR_EQUAL_TO");
        allTokens.put(NUMBER, "NUMBER");
        allTokens.put(IDENTIFIER, "IDENTIFIER");

        // Display file
        System.out.println("For the following file...");
        for(Token t = getNextToken(); t.kind!=EOF; t = getNextToken()) {
            System.out.print(allTokens.get(t.kind) + " ");
            System.out.print("('" + t.image + "') ");
        }
        System.out.println();

        // Re-initialise parser
        try {
            ReInit(new FileInputStream(args[0]));
        }
        catch(FileNotFoundException e) {
            System.err.println("File " + args[0] + " not found");
            return;
        }

        System.out.println("-------------------------------------------");
        // Has program been parsed?
        try {
            tokeniser.program();
            System.out.println("It has been parsed successfully!");
        } catch(ParseException p) {
            System.out.println("There was an error while parsing:");
            System.err.println(p);
        }
    }

/*****************************************
***** SECTION 4 - GRAMMAR *****
*****************************************/
  static final public void program() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case CONST:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      decl();
    }
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case INTEGER:
      case BOOLEAN:
      case VOID:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      function();
    }
    main();
  }

  static final public void decl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      var_decl();
      break;
    case CONST:
      const_decl();
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void var_decl() throws ParseException {
    jj_consume_token(VAR);
    ident_list();
    jj_consume_token(COLON);
    type();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      ident_list();
      jj_consume_token(COLON);
      type();
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void const_decl() throws ParseException {
    jj_consume_token(CONST);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    type();
    jj_consume_token(ASSIGNMENT);
    expression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(COLON);
      type();
      jj_consume_token(ASSIGNMENT);
      expression();
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void function_list() throws ParseException {
    function();
    function_list();
  }

  static final public void function() throws ParseException {
    type();
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LEFT_BRACKET);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      parameter_list();
    }
    jj_consume_token(RIGHT_BRACKET);
    jj_consume_token(LEFT_BRACE);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case CONST:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      decl();
    }
    statement_block();
    jj_consume_token(RETURN);
    jj_consume_token(LEFT_BRACKET);
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TRUE:
      case FALSE:
      case LEFT_BRACKET:
      case MINUS:
      case IDENTIFIER:
      case NUMBER:
        ;
        break;
      default:
        jj_la1[7] = jj_gen;
        break label_7;
      }
      expression();
    }
    jj_consume_token(RIGHT_BRACKET);
    jj_consume_token(SEMICOLON);
    jj_consume_token(RIGHT_BRACE);
  }

  static final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void parameter_list() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(COLON);
    type();
    parameter_list_prime();
  }

  static final public void parameter_list_prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      parameter_list();
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
  }

  static final public void main() throws ParseException {
    jj_consume_token(MAIN);
    jj_consume_token(LEFT_BRACE);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
      case CONST:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_8;
      }
      decl();
    }
    statement_block();
    jj_consume_token(RIGHT_BRACE);
  }

  static final public void statement_block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
    case WHILE:
    case SK:
    case LEFT_BRACE:
    case IDENTIFIER:
      statement();
      statement_block();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
  }

  static final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      statement_prime();
      break;
    case LEFT_BRACE:
      jj_consume_token(LEFT_BRACE);
      statement_block();
      jj_consume_token(RIGHT_BRACE);
      break;
    case IF:
      jj_consume_token(IF);
      condition();
      jj_consume_token(LEFT_BRACE);
      statement_block();
      jj_consume_token(RIGHT_BRACE);
      jj_consume_token(ELSE);
      statement();
      break;
    case WHILE:
      jj_consume_token(WHILE);
      condition();
      jj_consume_token(LEFT_BRACE);
      statement_block();
      jj_consume_token(RIGHT_BRACE);
      break;
    case SK:
      jj_consume_token(SK);
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void statement_prime() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGNMENT:
      jj_consume_token(ASSIGNMENT);
      expression();
      jj_consume_token(SEMICOLON);
      break;
    case LEFT_BRACKET:
      jj_consume_token(LEFT_BRACKET);
      arg_list();
      jj_consume_token(RIGHT_BRACKET);
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void expression() throws ParseException {
    fragment();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      binary_arith_op();
      fragment();
      break;
    default:
      jj_la1[14] = jj_gen;

    }
  }

  static final public void fragment() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEFT_BRACKET:
        jj_consume_token(LEFT_BRACKET);
        arg_list();
        jj_consume_token(RIGHT_BRACKET);
        fragment_dash();
        break;
      default:
        jj_la1[15] = jj_gen;
        fragment_dash();
      }
      break;
    case MINUS:
      jj_consume_token(MINUS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        jj_consume_token(IDENTIFIER);
        break;
      case NUMBER:
        jj_consume_token(NUMBER);
        break;
      default:
        jj_la1[16] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      fragment_dash();
      break;
    case NUMBER:
      jj_consume_token(NUMBER);
      fragment_dash();
      break;
    case TRUE:
      jj_consume_token(TRUE);
      fragment_dash();
      break;
    case FALSE:
      jj_consume_token(FALSE);
      fragment_dash();
      break;
    case LEFT_BRACKET:
      jj_consume_token(LEFT_BRACKET);
      expression();
      jj_consume_token(RIGHT_BRACKET);
      fragment_dash();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void fragment_dash() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
    case MINUS:
      binary_arith_op();
      fragment();
      fragment_dash();
      break;
    default:
      jj_la1[18] = jj_gen;

    }
  }

  static final public void binary_arith_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

/* Error: Left recursion detected: "condition... --> condition..." */
/* trying to fix by attmepting to remove left recursion at bottom of condition */
  static final public void condition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      condition();
      condition_dash();
      break;
    case LEFT_BRACKET:
      jj_consume_token(LEFT_BRACKET);
      condition();
      jj_consume_token(RIGHT_BRACKET);
      condition_dash();
      break;
    case TRUE:
    case FALSE:
    case MINUS:
    case IDENTIFIER:
    case NUMBER:
      expression();
      comp_op();
      expression();
      condition_dash();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void condition_dash() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
    case AND:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        jj_consume_token(OR);
        break;
      case AND:
        jj_consume_token(AND);
        break;
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      condition();
      condition_dash();
      break;
    default:
      jj_la1[22] = jj_gen;

    }
  }

  static final public void comp_op() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      jj_consume_token(EQUALS);
      break;
    case NOT_EQUALS:
      jj_consume_token(NOT_EQUALS);
      break;
    case LESS_THAN:
      jj_consume_token(LESS_THAN);
      break;
    case LESS_THAN_OR_EQUAL_TO:
      jj_consume_token(LESS_THAN_OR_EQUAL_TO);
      break;
    case GREATER_THAN:
      jj_consume_token(GREATER_THAN);
      break;
    case GREATER_THAN_OR_EQUAL_TO:
      jj_consume_token(GREATER_THAN_OR_EQUAL_TO);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void arg_list() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      nemp_arg_list();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
  }

  static final public void nemp_arg_list() throws ParseException {
    jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      nemp_arg_list();
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
  }

  static final public void ident_list() throws ParseException {
    jj_consume_token(IDENTIFIER);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[26] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      jj_consume_token(IDENTIFIER);
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public assignment_oneTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1800,0x1c000,0x1800,0x10000000,0x10000000,0x0,0x1800,0x300000,0x1c000,0x10000000,0x1800,0x80c40000,0x80c40000,0x0,0x0,0x0,0x0,0x300000,0x0,0x0,0x300000,0x0,0x0,0x0,0x0,0x10000000,0x10000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x8000,0x0,0x28022,0x0,0x0,0x0,0x8000,0x8000,0xa,0x30,0x2,0x28000,0x28022,0x30,0x30,0x28062,0x180,0x180,0x7e00,0x8000,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public assignment_one(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public assignment_one(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new assignment_oneTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public assignment_one(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new assignment_oneTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public assignment_one(assignment_oneTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(assignment_oneTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
